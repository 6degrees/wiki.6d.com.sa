"use strict";(self.webpackChunkwiki_6_d_com_sa=self.webpackChunkwiki_6_d_com_sa||[]).push([[9936],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>u});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),p=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},c=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(a),u=r,y=d["".concat(s,".").concat(u)]||d[u]||m[u]||l;return a?t.createElement(y,o(o({ref:n},c),{},{components:a})):t.createElement(y,o({ref:n},c))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9475:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var t=a(7462),r=(a(7294),a(3905));const l={},o="Prepare for Kubernetes (K8)",i={unversionedId:"laravel/prepare-for-k8",id:"laravel/prepare-for-k8",title:"Prepare for Kubernetes (K8)",description:"Prerequisite",source:"@site/docs/laravel/prepare-for-k8.md",sourceDirName:"laravel",slug:"/laravel/prepare-for-k8",permalink:"/docs/laravel/prepare-for-k8",draft:!1,editUrl:"https://github.com/6degrees/wiki.6d.com.sa/edit/main/docs/laravel/prepare-for-k8.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MOVE to S3",permalink:"/docs/laravel/migrate-media-to-s3"},next:{title:"Others",permalink:"/docs/category/others"}},s={},p=[{value:"Prerequisite",id:"prerequisite",level:2},{value:"Cancel file system dependencies",id:"cancel-file-system-dependencies",level:2},{value:"Move all images and media to S3, follow the tutorial",id:"move-all-images-and-media-to-s3-follow-the-tutorial",level:3},{value:"Cancel other filesystem dependencies",id:"cancel-other-filesystem-dependencies",level:3},{value:"Enhance dockerization",id:"enhance-dockerization",level:2},{value:"Env file",id:"env-file",level:2},{value:"Manifsets",id:"manifsets",level:2},{value:"dployment.yaml",id:"dploymentyaml",level:3},{value:"service.yaml",id:"serviceyaml",level:3},{value:"ingress.yaml",id:"ingressyaml",level:3},{value:"configMap.yaml",id:"configmapyaml",level:3},{value:"externalSecrets.yaml",id:"externalsecretsyaml",level:3}],c={toc:p};function m(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"prepare-for-kubernetes-k8"},"Prepare for Kubernetes (K8)"),(0,r.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a K8 cluster, whether it is on a cloud service provider such as linode, gcp, aws, or if you provision it entirely on your own servers, or on local pc using Minicube or others."),(0,r.kt)("li",{parentName:"ul"},"Kubectl installed on your local machine (to handle work with the k8 cluster)"),(0,r.kt)("li",{parentName:"ul"},"configuring kubectl to your cluster"),(0,r.kt)("li",{parentName:"ul"},"dockerized Laravel"),(0,r.kt)("li",{parentName:"ul"},"a redis instance"),(0,r.kt)("li",{parentName:"ul"},"s3 buckets"),(0,r.kt)("li",{parentName:"ul"},"deployment files")),(0,r.kt)("h2",{id:"cancel-file-system-dependencies"},"Cancel file system dependencies"),(0,r.kt)("h3",{id:"move-all-images-and-media-to-s3-follow-the-tutorial"},"Move all images and media to S3, follow the tutorial"),(0,r.kt)("p",null,"follow this guide ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.6degrees.com.sa/docs/laravel/migrate-to-s3"},"https://wiki.6degrees.com.sa/docs/laravel/migrate-to-s3")),(0,r.kt)("h3",{id:"cancel-other-filesystem-dependencies"},"Cancel other filesystem dependencies"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Move logging to stdout so you can see it using ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl logs"),"\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"config/logging.php")," add:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-php"},"  'stdout' => [\n      'driver' => 'monolog',\n      'level' => env('LOG_LEVEL', 'debug'),\n      'handler' => StreamHandler::class,\n      'formatter' => env('LOG_STDOUT_FORMATTER'),\n      'with' => [\n          'stream' => 'php://stdout',\n      ],\n  ],\n")),(0,r.kt)("p",{parentName:"li"},"then, set ",(0,r.kt)("inlineCode",{parentName:"p"},"LOG_CHANNEL")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout")," in configMap, secret (.env)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"install predis\n",(0,r.kt)("inlineCode",{parentName:"p"},"composer require predis/predis"),"\nadjust configmap, secret or .env"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'  REDIS_CLIENT: "predis"\n  REDIS_PREFIX: "yourappname-prod_"\n  REDIS_HOST: "redis.redis.svc.cluster.local" # for k8 cluster\n  REDIS_PORT: "6379"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Make caching driver redis"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'CACHE_DRIVER: "redis"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Make session driver redis"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'SESSION_DRIVER: "redis"\n')))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"now you have a floating flying larval, one more thing to make things sweet.")),(0,r.kt)("h2",{id:"enhance-dockerization"},"Enhance dockerization"),(0,r.kt)("p",null,"instead of having php-fpm and nginx (reverse proxy) on separate images, so you will have the need to have a shared volume between them, or a pvc, you can use an image that combines both, the reverse proxy and the php-fpm such as the ones here ",(0,r.kt)("a",{parentName:"p",href:"https://serversideup.net/open-source/docker-php"},"https://serversideup.net/open-source/docker-php"),", thus, you will only need one deployment, one service, one ingress."),(0,r.kt)("h2",{id:"env-file"},"Env file"),(0,r.kt)("p",null,"for Environment variables, since we use ",(0,r.kt)("strong",{parentName:"p"},"Valut by Hashicorp"),", you will need to split the env vars to two k8 manifests, one is a ",(0,r.kt)("inlineCode",{parentName:"p"},"configMap"),", for env variables that are not secret, and one ",(0,r.kt)("inlineCode",{parentName:"p"},"externalSecrets")," (secrets) so it will pull it from vault."),(0,r.kt)("p",null,"and that's it,"),(0,r.kt)("p",null,"below is a sample for all the yaml files needed for k8, and with how to apply them manually.\nwe prefer using argocd for deployment, so, store them in a separate repo, or in the same app repo in a k8s folder, then, add that repo folder in argocd so it will handle sync and deployment automatically."),(0,r.kt)("h2",{id:"manifsets"},"Manifsets"),(0,r.kt)("h3",{id:"dploymentyaml"},"dployment.yaml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: almoajil-prod-larvel\n  namespace: almoajil-prod\n  labels:\n    app: almoajil-prod-larvel\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: almoajil-prod-larvel\n  template:\n    metadata:\n      labels:\n        app: almoajil-prod-larvel\n    spec:\n      imagePullSecrets:\n        - name: ghcr-secret\n      containers:\n        - name: almoajil-prod-larvel\n          image: "ghcr.io/moajil-project/php_laravel_cms:latest"\n          ports:\n            - containerPort: 8080\n          envFrom:\n            - configMapRef:\n                name: almoajil-prod-configmap\n            - secretRef:\n                name: almoajil-prod-secrets\n\n')),(0,r.kt)("h3",{id:"serviceyaml"},"service.yaml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: almoajil-prod-laravel\n  namespace: almoajil-prod\nspec:\n  selector:\n    app: almoajil-prod-larvel\n  ports:\n    - protocol: TCP\n      port: 8080\n      targetPort: 8080\n\n")),(0,r.kt)("h3",{id:"ingressyaml"},"ingress.yaml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: almoajil-prod-ingress\n  namespace: almoajil-prod\n  annotations:\n    cert-manager.io/cluster-issuer: http01-clusterissuer\n    nginx.ingress.kubernetes.io/ssl-redirect: "true"\n    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"\nspec:\n  ingressClassName: nginx\n  tls:\n    - hosts:\n        - almoajilhospitality.com\n      secretName: almoajil-prod-tls\n  rules:\n  -  host: almoajilhospitality.com\n     http:\n      paths:\n      - pathType: Prefix\n        path: "/"\n        backend:\n          service:\n            name: almoajil-prod-laravel\n            port:\n              number: 8080\n\n')),(0,r.kt)("h3",{id:"configmapyaml"},"configMap.yaml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: almoajil-prod-configmap\n  namespace: almoajil-prod\ndata:\n  APP_URL: "https://almoajilhospitality.com/"\n  APP_NAME: "Almoajil"\n  APP_ENV: "production"\n  APP_DEBUG: "false"\n  ASSET_URL: "/"\n\n  FORCE_HTTPS: "true"\n\n  LOG_CHANNEL: "stdout" # k8 compatible\n  LOG_DEPRECATIONS_CHANNEL: "null"\n  LOG_LEVEL: "debug"\n\n  DB_CONNECTION: "mysql"\n\n  REDIS_CLIENT: "predis"\n  REDIS_PREFIX: "deets-prod_"\n  REDIS_HOST: "redis.redis.svc.cluster.local"\n  REDIS_PORT: "6379"\n\n  BROADCAST_DRIVER: "log"\n  CACHE_DRIVER: "redis"\n  QUEUE_CONNECTION: "sync"\n\n  SESSION_DRIVER: "redis" # k8 compatible\n  SESSION_LIFETIME: "120"\n\n  MEMCACHED_HOST: "memcached"\n\n  MAIL_MAILER: "smtp"\n  MAIL_PORT: "587"\n  MAIL_ENCRYPTION: "tls"\n\n  FILESYSTEM_DRIVER: "s3"\n  FILESYSTEM_DISK: "s3"\n  FILAMENT_FILESYSTEM_DRIVER: "s3"\n  MEDIA_DISK: "s3"\n\n  AWS_DEFAULT_REGION: "us-east-1"\n  AWS_BUCKET: "almoajil-prod"\n  AWS_USE_PATH_STYLE_ENDPOINT: "true"\n  AWS_ENDPOINT: "https://hel1.your-objectstorage.com"\n  AWS_URL: "https://hel1.your-objectstorage.com/almoajil-prod"\n\n  PUSHER_APP_ID: ""\n  PUSHER_APP_KEY: ""\n  PUSHER_APP_SECRET: ""\n  PUSHER_HOST: ""\n  PUSHER_PORT: ""\n  PUSHER_SCHEME: ""\n  PUSHER_APP_CLUSTER: "mt1"\n  MIX_PUSHER_APP_KEY: "${PUSHER_APP_KEY}"\n  VITE_APP_NAME: "${APP_NAME}"\n  VITE_PUSHER_APP_KEY: "${PUSHER_APP_KEY}"\n  VITE_PUSHER_HOST: "${PUSHER_HOST}"\n  VITE_PUSHER_PORT: "${PUSHER_PORT}"\n  VITE_PUSHER_SCHEME: "${PUSHER_SCHEME}"\n  VITE_PUSHER_APP_CLUSTER: "${PUSHER_APP_CLUSTER}"\n  VITE_HOST: "127.0.0.1:8000"\n\n')),(0,r.kt)("h3",{id:"externalsecretsyaml"},"externalSecrets.yaml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: almoajil-prod-secrets\n  namespace: almoajil-prod\nspec:\n  refreshInterval: "15m"\n  secretStoreRef:\n    name: vault-backend\n    kind: ClusterSecretStore\n  target:\n    name: almoajil-prod-secrets\n    creationPolicy: Owner\n  data:\n    - secretKey: APP_KEY\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: APP_KEY\n\n    - secretKey: DB_HOST\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: DB_HOST\n\n    - secretKey: DB_PORT\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: DB_PORT\n\n    - secretKey: DB_DATABASE\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: DB_DATABASE\n\n    - secretKey: DB_USERNAME\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: DB_USERNAME\n\n    - secretKey: DB_PASSWORD\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: DB_PASSWORD\n\n    - secretKey: MAIL_HOST\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: MAIL_HOST\n        \n    - secretKey: MAIL_USERNAME\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: MAIL_USERNAME\n\n    - secretKey: MAIL_PASSWORD\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: MAIL_PASSWORD\n\n    - secretKey: MAIL_FROM_NAME\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: MAIL_FROM_NAME\n\n    - secretKey: MAIL_FROM_ADDRESS\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: MAIL_FROM_ADDRESS\n\n    - secretKey: MAIL_TO_ADDRESS\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: MAIL_TO_ADDRESS\n\n    - secretKey: AWS_ACCESS_KEY_ID\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: AWS_ACCESS_KEY_ID\n\n    - secretKey: AWS_SECRET_ACCESS_KEY\n      remoteRef:\n        key: almoajil-prod/secrets\n        property: AWS_SECRET_ACCESS_KEY\n\n')),(0,r.kt)("p",null,"after that, either apply the files directly, or use argocd to deploy."))}m.isMDXComponent=!0}}]);